{"ast":null,"code":"var _jsxFileName = \"/Users/ahroidlife/Documents/nextjs/blog/components/atoms/buttons/button.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { node, func, string } from 'prop-types';\nimport StyledButton, { StyledLinkButton, SyledButtonIcon } from './button.styles.jsx';\nimport { ArrowForward, Backpress } from \"../../../assets/icons\";\nconst Icons = {\n  arrowForward: ArrowForward,\n  backpress: Backpress\n};\n\nconst Button = (_ref) => {\n  let {\n    children,\n    href,\n    onClick,\n    isFocus,\n    variant,\n    rounded,\n    border,\n    target,\n    icon,\n    width,\n    height,\n    iconPosition,\n    iconTop,\n    iconRight,\n    iconLeft,\n    iconBottom,\n    isEqualWidth,\n    isEqualHeight\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"href\", \"onClick\", \"isFocus\", \"variant\", \"rounded\", \"border\", \"target\", \"icon\", \"width\", \"height\", \"iconPosition\", \"iconTop\", \"iconRight\", \"iconLeft\", \"iconBottom\", \"isEqualWidth\", \"isEqualHeight\"]);\n\n  if (!href) return __jsx(StyledButton, _extends({\n    onClick: onClick,\n    variant: variant,\n    isFocus: isFocus,\n    rounded: rounded,\n    width: width,\n    height: height,\n    border: border,\n    isEqualWidth: isEqualWidth,\n    isEqualHeight: isEqualHeight\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), children, __jsx(ButtonIcon, {\n    name: icon,\n    iconPosition: iconPosition,\n    iconRight: iconRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }));\n  return __jsx(StyledLinkButton, {\n    href: href,\n    variant: variant,\n    target: target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nconst ButtonIcon = ({\n  name,\n  iconPosition,\n  iconRight,\n  iconTop,\n  iconLeft,\n  iconBottom\n}) => {\n  if (Icons[name] === undefined) return null;\n  const Icon = Icons[name];\n  return __jsx(SyledButtonIcon, {\n    iconPosition: iconPosition,\n    iconTop: iconTop,\n    iconRight: iconRight,\n    iconLeft: iconLeft,\n    iconBottom: iconBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }));\n};\n\nButton.propTypes = {\n  children: node.isRequired,\n  href: string,\n  target: string,\n  onClick: func,\n  variant: string,\n  rounded: string\n};\nButton.defaultProps = {\n  children: \"Text Button\"\n};\nexport default Button;","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/components/atoms/buttons/button.jsx"],"names":["React","node","func","string","StyledButton","StyledLinkButton","SyledButtonIcon","ArrowForward","Backpress","Icons","arrowForward","backpress","Button","children","href","onClick","isFocus","variant","rounded","border","target","icon","width","height","iconPosition","iconTop","iconRight","iconLeft","iconBottom","isEqualWidth","isEqualHeight","props","ButtonIcon","name","undefined","Icon","propTypes","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { node, func, string } from 'prop-types'\n\nimport StyledButton, { StyledLinkButton,SyledButtonIcon } from './button.styles.jsx'\n\nimport { ArrowForward, Backpress } from \"../../../assets/icons\";\n\n\nconst Icons = {\n    arrowForward: ArrowForward,\n    backpress: Backpress\n}\n\nconst Button = ({\n    children, \n    href, \n    onClick,\n    isFocus, \n    variant, \n    rounded, \n    border, \n    target, \n    icon, \n    width, \n    height, \n    iconPosition,\n    iconTop,\n    iconRight,\n    iconLeft,\n    iconBottom,\n    isEqualWidth,\n    isEqualHeight,\n    ...props}) => {\n    if(!href)\n        return (\n            <StyledButton \n            onClick={onClick} \n            variant={variant} \n            isFocus={isFocus}\n            rounded={rounded} \n            width={width} \n            height={height} \n            border={border}\n            isEqualWidth={isEqualWidth}\n            isEqualHeight={isEqualHeight}\n            {...props}>\n                {children}\n                <ButtonIcon name={icon} iconPosition={iconPosition} iconRight={iconRight}/>\n            </StyledButton>\n        )\n    return (\n        <StyledLinkButton href={href} variant={variant} target={target}>\n            {children}\n        </StyledLinkButton>\n    )\n}\n\nconst ButtonIcon = ({ name, iconPosition, iconRight, iconTop, iconLeft, iconBottom }) => {\n\tif (Icons[name] === undefined) return null;\n\tconst Icon = Icons[name];\n\treturn (\n\t\t<SyledButtonIcon \n            iconPosition={iconPosition}\n            iconTop={iconTop}\n            iconRight={iconRight}\n            iconLeft={iconLeft}\n            iconBottom={iconBottom}\n        >\n\t\t\t<Icon />\n\t\t</SyledButtonIcon>\n\t);\n};\n\nButton.propTypes = {\n    children: node.isRequired,\n    href: string,\n    target: string,\n    onClick: func,\n    variant: string,\n    rounded: string,\n    \n}\n\nButton.defaultProps = {\n    children: \"Text Button\"\n}\n\n\nexport default Button"]},"metadata":{},"sourceType":"module"}