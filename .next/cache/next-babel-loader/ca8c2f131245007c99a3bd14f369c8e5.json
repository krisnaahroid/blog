{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport StyledButton, { StyledLinkButton, SyledButtonIcon } from './button.styles.jsx';\nimport { ArrowForward, Backpress } from \"../../../assets/icons\";\nconst Icons = {\n  arrowForward: ArrowForward,\n  backpress: Backpress\n};\n\nconst Button = (_ref) => {\n  let {\n    children,\n    href,\n    onClick,\n    isFocus,\n    variant,\n    rounded,\n    border,\n    target,\n    icon,\n    width,\n    height,\n    iconPosition,\n    iconTop,\n    iconRight,\n    iconLeft,\n    iconBottom,\n    isEqualWidth,\n    isEqualHeight\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"href\", \"onClick\", \"isFocus\", \"variant\", \"rounded\", \"border\", \"target\", \"icon\", \"width\", \"height\", \"iconPosition\", \"iconTop\", \"iconRight\", \"iconLeft\", \"iconBottom\", \"isEqualWidth\", \"isEqualHeight\"]);\n\n  if (!href) return __jsx(StyledButton, _extends({\n    onClick: onClick,\n    variant: variant,\n    isFocus: isFocus,\n    rounded: rounded,\n    width: width,\n    height: height,\n    border: border,\n    isEqualWidth: isEqualWidth,\n    isEqualHeight: isEqualHeight\n  }, props), children, __jsx(ButtonIcon, {\n    name: icon,\n    iconPosition: iconPosition,\n    iconRight: iconRight\n  }));\n  return __jsx(StyledLinkButton, {\n    href: href,\n    variant: variant,\n    target: target\n  }, children);\n};\n\nconst ButtonIcon = ({\n  name,\n  iconPosition,\n  iconRight,\n  iconTop,\n  iconLeft,\n  iconBottom\n}) => {\n  if (Icons[name] === undefined) return null;\n  const Icon = Icons[name];\n  return __jsx(SyledButtonIcon, {\n    iconPosition: iconPosition,\n    iconTop: iconTop,\n    iconRight: iconRight,\n    iconLeft: iconLeft,\n    iconBottom: iconBottom\n  }, __jsx(Icon, null));\n};\n\nButton.defaultProps = {\n  children: \"Text Button\"\n};\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}