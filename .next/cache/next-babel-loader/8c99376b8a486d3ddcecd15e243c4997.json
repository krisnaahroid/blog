{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { Container, View, Input, Icon, Text } from '../../../atoms';\nimport './styles.scss';\nimport Link from 'next/link';\n\nvar client = require('contentful').createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\nvar TextIcon = function TextIcon(_ref) {\n  var placeholder = _ref.placeholder,\n      left = _ref.left,\n      props = _ref.props;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchTerm = _React$useState2[0],\n      setSearchTerm = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchResults = _React$useState4[0],\n      setSearchResults = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      active = _React$useState6[0],\n      setActive = _React$useState6[1];\n\n  var refInput = useRef();\n  var refResults = useRef();\n\n  var handleChange = function handleChange(event) {\n    setSearchTerm(event.target.value);\n  };\n\n  function searching(title) {\n    var entries;\n    return _regeneratorRuntime.async(function searching$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(client.getEntries({\n              content_type: 'story',\n              'fields.title[match]': title\n            }));\n\n          case 2:\n            entries = _context.sent;\n\n            if (!entries.items) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", entries.items);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    function getResults() {\n      var results;\n      return _regeneratorRuntime.async(function getResults$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(searching(searchTerm));\n\n            case 2:\n              results = _context2.sent;\n              setSearchResults(_toConsumableArray(results));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    var handleFocus = function handleFocus() {\n      setActive(true);\n    };\n\n    var current = refInput.current;\n    current.addEventListener('focus', handleFocus);\n\n    function handleClickOutside(event) {\n      if (refResults.current && !refResults.current.contains(event.target)) {\n        setActive(false);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    if (searchTerm.length > 1) {\n      getResults();\n    } else {\n      setSearchResults([]);\n    }\n  }, [searchTerm]);\n  return __jsx(Container, {\n    className: \"header-input-search\",\n    position: \"relative\",\n    style: {\n      left: left\n    }\n  }, __jsx(Icon, {\n    name: \"search\",\n    position: \"absolute\",\n    left: \"15px\",\n    top: \"9px\",\n    width: \"1.3em\"\n  }), __jsx(Input, {\n    className: \"inputTextIcon\",\n    placeholder: placeholder,\n    width: \"300px\",\n    padding: \"5px 30px 5px 45px\",\n    value: searchTerm,\n    innerRef: refInput,\n    onChange: handleChange\n  }), __jsx(View, {\n    className: \"search-results \".concat(active ? 'isActiveInput' : ''),\n    direction: \"column\",\n    isEqualFlex: \"none\"\n  }, __jsx(View, {\n    height: \"30px\",\n    justify: \"space-between\",\n    align: \"center\"\n  }, __jsx(View, null, __jsx(Text, {\n    weight: \"medium\"\n  }, \"Results of \", __jsx(\"strong\", null, searchTerm))), __jsx(View, null, __jsx(View, {\n    className: \"rounded-counter\",\n    justify: \"center\",\n    align: \"center\"\n  }, __jsx(Text, {\n    variant: \"secondary\"\n  }, searchResults.length)))), __jsx(View, {\n    flexValue: \"1\",\n    className: \"content\",\n    innerRef: refResults\n  }, __jsx(\"ul\", null, searchResults.map(function (item, index) {\n    return __jsx(Link, {\n      key: index,\n      href: \"/stories/[slug]\",\n      as: \"/stories/\".concat(item.fields.slug)\n    }, __jsx(\"a\", {\n      style: {\n        textDecoration: 'none'\n      }\n    }, __jsx(\"li\", null, item.fields.title)));\n  })))));\n};\n\nexport default TextIcon;","map":null,"metadata":{},"sourceType":"module"}