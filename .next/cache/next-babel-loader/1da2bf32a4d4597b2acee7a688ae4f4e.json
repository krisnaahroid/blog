{"ast":null,"code":"import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE, USER } from '../types';\nimport { API, cookie } from '../../utilities'; // register user\n\nconst register = ({\n  firstname,\n  lastname,\n  mobile_no,\n  email_id,\n  password,\n  confirm_password\n}, type) => {\n  if (type !== 'register') {\n    throw new Error('Wrong API call!');\n  }\n\n  return dispatch => {\n    axios.post(`${API}/${type}`, {\n      firstname,\n      lastname,\n      mobile_no,\n      email_id,\n      password,\n      confirm_password\n    }).then(response => {\n      Router.push('/signin');\n      console.log(response.data.meta.message);\n    }).catch(err => {\n      switch (error.response.status) {\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 401:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n}; // gets token from the api and stores it in the redux store and in cookie\n\n\nconst authenticate = ({\n  email_id,\n  password\n}, type) => {\n  if (type !== 'login') {\n    throw new Error('Wrong API call!');\n  }\n\n  return dispatch => {\n    console.log(email_id);\n    axios.post(`${API}/${type}`, {\n      email_id,\n      password\n    }).then(response => {\n      console.log(response.data.data.user.token);\n      cookie.setCookie('token', response.data.data.user.token);\n      Router.push('/users');\n      dispatch({\n        type: AUTHENTICATE,\n        payload: response.data.data.user.token\n      });\n    }).catch(err => {\n      console.log(err);\n\n      switch (error.response.status) {\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 401:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n}; // gets the token from the cookie and saves it in the store\n\n\nconst reauthenticate = token => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\n\nconst deauthenticate = () => {\n  return dispatch => {\n    cookie.removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n};\n\nconst getUser = ({\n  token\n}, type) => {\n  console.log(token);\n  return dispatch => {\n    axios.get(`${API}/${type}`, {\n      headers: {\n        \"Authorization\": \"bearer \" + token\n      }\n    }).then(response => {\n      dispatch({\n        type: USER,\n        payload: response.data.data.user\n      });\n    }).catch(error => {\n      switch (error.response.status) {\n        case 401:\n          Router.push('/');\n          break;\n\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n\n        case 503:\n          alert(error.response.data.meta.message);\n          Router.push('/');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n};\n\nexport default {\n  register,\n  authenticate,\n  reauthenticate,\n  deauthenticate,\n  getUser\n};","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/store/modules/login/actions.js"],"names":["Router","axios","AUTHENTICATE","DEAUTHENTICATE","USER","API","cookie","register","firstname","lastname","mobile_no","email_id","password","confirm_password","type","Error","dispatch","post","then","response","push","console","log","data","meta","message","catch","err","error","status","alert","authenticate","user","token","setCookie","payload","reauthenticate","deauthenticate","removeCookie","getUser","get","headers"],"mappings":"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","sourcesContent":["import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE, USER } from '../types';\nimport { API, cookie } from '../../utilities';\n\n// register user\nconst register = ({ firstname, lastname, mobile_no, email_id, password, confirm_password }, type) => {\n  if (type !== 'register') {\n    throw new Error('Wrong API call!');\n  }\n  return (dispatch) => {\n    axios.post(`${API}/${type}`, {firstname, lastname, mobile_no, email_id, password, confirm_password })\n      .then((response) => {\n        Router.push('/signin');\n        console.log(response.data.meta.message);\n      })\n      .catch((err) => {\n        switch (error.response.status) {\n          case 422:\n          alert(error.response.data.meta.message);\n            break;\n          case 401:\n          alert(error.response.data.meta.message);\n            break;\n          case 500:\n          alert('Interval server error! Try again!');\n            break;\n          default:\n          alert(error.response.data.meta.message);\n            break;\n        }\n      });\n  };\n};\n// gets token from the api and stores it in the redux store and in cookie\nconst authenticate = ({ email_id, password }, type) => {\n  if (type !== 'login') {\n    throw new Error('Wrong API call!');\n  }\n  return (dispatch) => {\n    console.log(email_id)\n    axios.post(`${API}/${type}`, { email_id, password })\n      .then((response) => {\n        console.log(response.data.data.user.token);\n        cookie.setCookie('token', response.data.data.user.token);\n        Router.push('/users');\n        dispatch({type: AUTHENTICATE, payload: response.data.data.user.token});\n      })\n      .catch((err) => {\n        console.log(err);\n        switch (error.response.status) {\n          case 422:\n          alert(error.response.data.meta.message);\n            break;\n          case 401:\n          alert(error.response.data.meta.message);\n            break;\n          case 500:\n          alert('Interval server error! Try again!');\n            break;\n          default:\n          alert(error.response.data.meta.message);\n            break;\n        }\n\n      });\n  };\n};\n\n// gets the token from the cookie and saves it in the store\nconst reauthenticate = (token) => {\n  return (dispatch) => {\n    dispatch({type: AUTHENTICATE, payload: token});\n  };\n};\n\n// removing the token\nconst deauthenticate = () => {\n  return (dispatch) => {\n    cookie.removeCookie('token');\n    Router.push('/');\n    dispatch({type: DEAUTHENTICATE});\n  };\n};\n\nconst getUser = ({ token }, type) => {\n  console.log(token)\n  return (dispatch) => {\n    axios.get(`${API}/${type}`,{headers: {\n      \"Authorization\" : \"bearer \" + token\n    }\n  })\n      .then((response) => {\n        dispatch({ type: USER, payload: response.data.data.user });\n      })\n      .catch((error) => {\n        switch (error.response.status) {\n          case 401:\n            Router.push('/');\n            break;\n          case 422:\n            alert(error.response.data.meta.message);\n            break;\n          case 500:\n          alert('Interval server error! Try again!');\n          case 503:\n          alert(error.response.data.meta.message);\n          Router.push('/');\n            break;\n          default:\n          alert(error.response.data.meta.message);\n            break;\n        }\n      });\n  };\n};\n\n\nexport default {\n  register,\n  authenticate,\n  reauthenticate,\n  deauthenticate,\n  getUser,\n};"]},"metadata":{},"sourceType":"module"}