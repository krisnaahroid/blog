{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport StyledView from './view.styles.jsx';\n\nconst View = (_ref) => {\n  let {\n    children,\n    innerRef,\n    style,\n    isEqualFlex,\n    flexValue,\n    direction,\n    justify,\n    overflow,\n    isBoxShadow,\n    width,\n    isEqualWidth,\n    isEqualHeight,\n    height,\n    radius,\n    backgroundColor,\n    isEqualBackground,\n    isEqualDirection,\n    position,\n    bottom,\n    margin,\n    maxWidth,\n    top,\n    left,\n    border,\n    isPadding\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"innerRef\", \"style\", \"isEqualFlex\", \"flexValue\", \"direction\", \"justify\", \"overflow\", \"isBoxShadow\", \"width\", \"isEqualWidth\", \"isEqualHeight\", \"height\", \"radius\", \"backgroundColor\", \"isEqualBackground\", \"isEqualDirection\", \"position\", \"bottom\", \"margin\", \"maxWidth\", \"top\", \"left\", \"border\", \"isPadding\"]);\n\n  return __jsx(StyledView, _extends({\n    ref: innerRef,\n    style: style,\n    isBoxShadow: isBoxShadow,\n    isEqualFlex: isEqualFlex,\n    width: width,\n    height: height,\n    isEqualWidth: isEqualWidth,\n    isEqualHeight: isEqualHeight,\n    radius: radius,\n    backgroundColor: backgroundColor,\n    isEqualBackground: isEqualBackground,\n    flexValue: flexValue,\n    justify: justify,\n    overflow: overflow,\n    position: position,\n    bottom: bottom,\n    direction: direction,\n    isEqualDirection: isEqualDirection,\n    margin: margin,\n    maxWidth: maxWidth,\n    top: top,\n    left: left,\n    border: border,\n    isPadding: isPadding\n  }, props), children);\n};\n\nexport default View;","map":null,"metadata":{},"sourceType":"module"}