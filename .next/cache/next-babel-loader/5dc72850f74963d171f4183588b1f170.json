{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nexport default function useOnScreen(ref) {\n  var rootMargin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0px';\n\n  // State and setter for storing whether element is visible\n  var _useState = useState(false),\n      isIntersecting = _useState[0],\n      setIntersecting = _useState[1];\n\n  useEffect(function () {\n    var observer = new IntersectionObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          entry = _ref2[0];\n\n      // Update our state when observer callback fires\n      setIntersecting(entry.isIntersecting);\n    }, {\n      rootMargin: rootMargin\n    });\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return function () {\n      observer.unobserve(ref.current);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return isIntersecting;\n}","map":null,"metadata":{},"sourceType":"module"}