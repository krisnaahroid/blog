{"ast":null,"code":"var _jsxFileName = \"/Users/ahroidlife/Documents/nextjs/blog/components/atoms/texts/text.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { forwardRef } from 'react';\nimport StyledText, { StyledLink } from './text.styles.jsx';\nimport { string } from 'prop-types';\nconst Text = forwardRef(({\n  children,\n  href,\n  ref,\n  family,\n  target,\n  variant,\n  size,\n  weight,\n  align,\n  isEqualSize,\n  isEqualAlign,\n  margin,\n  width,\n  props\n}) => {\n  if (!href) return __jsx(StyledText, _extends({\n    variant: variant,\n    size: size,\n    weight: weight,\n    align: align,\n    isEqualSize: isEqualSize,\n    isEqualAlign: isEqualAlign,\n    margin: margin,\n    width: width,\n    family: family,\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }), children);\n  return __jsx(StyledLink, {\n    href: href,\n    variant: variant,\n    target: target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, children);\n});\nText.propTypes = {\n  variant: string,\n  size: string,\n  weight: string,\n  align: string,\n  isEqualSize: string,\n  isEqualAlign: string\n};\nexport default Text;","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/components/atoms/texts/text.jsx"],"names":["React","forwardRef","StyledText","StyledLink","string","Text","children","href","ref","family","target","variant","size","weight","align","isEqualSize","isEqualAlign","margin","width","props","propTypes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,UAAP,IAAoBC,UAApB,QAAqC,mBAArC;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,MAAMC,IAAI,GAAGJ,UAAU,CAAC,CAAC;AAACK,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,GAAjB;AAAsBC,EAAAA,MAAtB;AAA8BC,EAAAA,MAA9B;AAAsCC,EAAAA,OAAtC;AAA+CC,EAAAA,IAA/C;AAAqDC,EAAAA,MAArD;AAA6DC,EAAAA,KAA7D;AAAoEC,EAAAA,WAApE;AAAiFC,EAAAA,YAAjF;AAA+FC,EAAAA,MAA/F;AAAuGC,EAAAA,KAAvG;AAA8GC,EAAAA;AAA9G,CAAD,KAA0H;AAE9I,MAAG,CAACZ,IAAJ,EACI,OACI,MAAC,UAAD;AACA,IAAA,OAAO,EAAEI,OADT;AAEA,IAAA,IAAI,EAAEC,IAFN;AAGA,IAAA,MAAM,EAAEC,MAHR;AAIA,IAAA,KAAK,EAAEC,KAJP;AAKA,IAAA,WAAW,EAAEC,WALb;AAMA,IAAA,YAAY,EAAEC,YANd;AAOA,IAAA,MAAM,EAAEC,MAPR;AAQA,IAAA,KAAK,EAAEC,KARP;AASA,IAAA,MAAM,EAAET,MATR;AAUA,IAAA,GAAG,EAAED;AAVL,KAWIW,KAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaKb,QAbL,CADJ;AAkBJ,SACI,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEC,IAAlB;AAAwB,IAAA,OAAO,EAAEI,OAAjC;AAA0C,IAAA,MAAM,EAAED,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,QADL,CADJ;AAKH,CA1BsB,CAAvB;AA4BAD,IAAI,CAACe,SAAL,GAAiB;AACbT,EAAAA,OAAO,EAAEP,MADI;AAEbQ,EAAAA,IAAI,EAAER,MAFO;AAGbS,EAAAA,MAAM,EAAET,MAHK;AAIbU,EAAAA,KAAK,EAAEV,MAJM;AAKbW,EAAAA,WAAW,EAAEX,MALA;AAMbY,EAAAA,YAAY,EAAEZ;AAND,CAAjB;AASA,eAAeC,IAAf","sourcesContent":["import React, { forwardRef } from 'react'\n\nimport StyledText, {StyledLink} from './text.styles.jsx'\nimport { string } from 'prop-types'\n\nconst Text = forwardRef(({children, href, ref, family, target, variant, size, weight, align, isEqualSize, isEqualAlign, margin, width, props}) => {\n\n    if(!href)\n        return(\n            <StyledText \n            variant={variant} \n            size={size} \n            weight={weight} \n            align={align}\n            isEqualSize={isEqualSize}\n            isEqualAlign={isEqualAlign}\n            margin={margin}\n            width={width}\n            family={family}\n            ref={ref}\n            {...props}\n            >\n                {children}\n            </StyledText>\n        )\n\n    return (\n        <StyledLink href={href} variant={variant} target={target}>\n            {children}\n        </StyledLink>\n    )\n})\n\nText.propTypes = {\n    variant: string,\n    size: string,\n    weight: string,\n    align: string,\n    isEqualSize: string,\n    isEqualAlign: string\n}\n\nexport default Text"]},"metadata":{},"sourceType":"module"}