{"ast":null,"code":"import styled from 'styled-components';\nimport breakpoints from '../../particles/breakpoints';\n\nconst isBackgroundColor = props => {\n  if (!props.variant) return \"#2525F0\";\n  let color;\n\n  switch (props.variant) {\n    case \"primary\":\n      color = \"#2525F0\";\n      break;\n\n    case \"secondary\":\n      color = \"#EDEDED\";\n      break;\n\n    case \"dark\":\n      color = \"#1E2127\";\n\n    default:\n      color = \"#001CF9\";\n      break;\n  }\n\n  return color;\n};\n\nconst isHover = props => {\n  let color;\n\n  switch (props.variant) {\n    case \"primary\":\n      color = \"#F7FBFF\";\n      break;\n\n    case \"secondary\":\n      color = \"#001CF9\";\n      break;\n\n    case \"dark\":\n      color = \"#000000\";\n\n    default:\n      color = \"#001CF9\";\n      break;\n  }\n\n  return color;\n};\n\nconst isCursor = props => {\n  if (props.variant == \"disabled\") {\n    return \"not-allowed\";\n  } else {\n    return \"pointer\";\n  }\n};\n\nconst isColor = props => {\n  if (props.variant == \"secondary\") {\n    return \"#1E2127\";\n  } else {\n    return \"#ffffff\";\n  }\n};\n\nconst isPointer = props => {\n  if (props.variant == \"disabled\") {\n    return \"none\";\n  } else {\n    return \"all\";\n  }\n};\n\nconst border = props => {\n  if (!props.border) return \"none\";\n\n  switch (props.border) {\n    case 'primary':\n      return \"#3838F8\";\n      break;\n\n    case 'secondary':\n      return \"#EDEDED\";\n\n    default:\n      return \"none\";\n      break;\n  }\n};\n\nexport const StyledButton = styled.button.withConfig({\n  displayName: \"buttonstyles__StyledButton\",\n  componentId: \"sc-1sm1y0z-0\"\n})([\"position:relative;display:inline-block;padding:8px 12px 8px 12px;width:\", \";height:\", \";min-width:120px;border:\", \";border-radius:5px;background-color:\", \";cursor:\", \";pointer-events:\", \";text-decoration:none;transition:all 0.8s ease;white-space:nowrap;font-family:'Montserrat',sans-serif;font-style:normal;font-size:14px;font-weight:500;line-height:17px;text-align:center;color:\", \";&:hover{color:\", \";box-shadow:2px 10px 15px rgba(30,33,39,0.10);}&:focus{outline:none;}&:active{outline:none;}@media \", \"{width:\", \" !important;height:\", \" !important;}\"], props => props.width, props => props.height, props => !props.border ? 'none' : '1px solid ' + border(props), props => isBackgroundColor(props), props => isCursor(props), props => isPointer(props), props => isColor(props), props => !props.isFocus ? '#ffffff' : '#001CF9', breakpoints.mobileL, props => props.isEqualWidth, props => props.isEqualHeight);\nexport const StyledLinkButton = styled(StyledButton).attrs({\n  as: \"a\"\n}).withConfig({\n  displayName: \"buttonstyles__StyledLinkButton\",\n  componentId: \"sc-1sm1y0z-1\"\n})([\"text-deocration:none;\"]);\nexport const SyledButtonIcon = styled.span.withConfig({\n  displayName: \"buttonstyles__SyledButtonIcon\",\n  componentId: \"sc-1sm1y0z-2\"\n})([\"position:\", \";right:\", \";top:\", \";left:\", \";bottom:\", \";\"], props => props.iconPosition, props => props.iconRight, props => props.iconTop, props => props.iconLeft, props => props.iconBottom);\nexport default StyledButton;","map":null,"metadata":{},"sourceType":"module"}