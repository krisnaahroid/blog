{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { Container, View, Input, Icon, Text } from '../../../atoms';\nimport './styles.scss';\nimport Link from 'next/link';\n\nconst client = require('contentful').createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\nconst TextIcon = ({\n  placeholder,\n  left,\n  props\n}) => {\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const [searchResults, setSearchResults] = React.useState([]);\n  const [active, setActive] = React.useState(false);\n  const refInput = useRef();\n  const refResults = useRef();\n\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  async function searching(title) {\n    const entries = await client.getEntries({\n      content_type: 'story',\n      'fields.title[match]': title\n    });\n    if (entries.items) return entries.items;\n  }\n\n  useEffect(() => {\n    async function getResults() {\n      const results = await searching(searchTerm);\n      setSearchResults([...results]);\n    }\n\n    const handleFocus = () => {\n      setActive(true);\n    };\n\n    const {\n      current\n    } = refInput;\n    current.addEventListener('focus', handleFocus);\n\n    function handleClickOutside(event) {\n      if (refResults.current && !refResults.current.contains(event.target)) {\n        setActive(false);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    if (searchTerm.length > 1) {\n      getResults();\n    } else {\n      setSearchResults([]);\n    }\n  }, [searchTerm]);\n  return __jsx(Container, {\n    className: \"header-input-search\",\n    position: \"relative\",\n    style: {\n      left: left\n    }\n  }, __jsx(Icon, {\n    name: \"search\",\n    position: \"absolute\",\n    left: \"15px\",\n    top: \"9px\",\n    width: \"1.3em\"\n  }), __jsx(Input, {\n    className: \"inputTextIcon\",\n    placeholder: placeholder,\n    width: \"300px\",\n    padding: \"5px 30px 5px 45px\",\n    value: searchTerm,\n    innerRef: refInput,\n    onChange: handleChange\n  }), __jsx(View, {\n    className: `search-results ${active ? 'isActiveInput' : ''}`,\n    direction: \"column\",\n    isEqualFlex: \"none\"\n  }, __jsx(View, {\n    height: \"30px\",\n    justify: \"space-between\",\n    align: \"center\"\n  }, __jsx(View, null, __jsx(Text, {\n    weight: \"medium\"\n  }, \"Results of \", __jsx(\"strong\", null, searchTerm))), __jsx(View, null, __jsx(View, {\n    className: \"rounded-counter\",\n    justify: \"center\",\n    align: \"center\"\n  }, __jsx(Text, {\n    variant: \"secondary\"\n  }, searchResults.length)))), __jsx(View, {\n    flexValue: \"1\",\n    className: \"content\",\n    innerRef: refResults\n  }, __jsx(\"ul\", null, searchResults.map((item, index) => __jsx(Link, {\n    key: index,\n    href: \"/stories/[slug]\",\n    as: `/stories/${item.fields.slug}`\n  }, __jsx(\"a\", {\n    style: {\n      textDecoration: 'none'\n    }\n  }, __jsx(\"li\", null, item.fields.title))))))));\n};\n\nexport default TextIcon;","map":null,"metadata":{},"sourceType":"module"}