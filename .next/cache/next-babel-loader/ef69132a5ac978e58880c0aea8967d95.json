{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ahroidlife/Documents/nextjs/blog/components/atoms/texts/text.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { forwardRef } from 'react';\nimport StyledText, { StyledLink } from './text.styles.jsx';\nimport { string } from 'prop-types';\nvar Text = forwardRef(function (_ref) {\n  var children = _ref.children,\n      ref = _ref.ref,\n      href = _ref.href,\n      family = _ref.family,\n      target = _ref.target,\n      variant = _ref.variant,\n      size = _ref.size,\n      weight = _ref.weight,\n      align = _ref.align,\n      isEqualSize = _ref.isEqualSize,\n      isEqualAlign = _ref.isEqualAlign,\n      margin = _ref.margin,\n      width = _ref.width,\n      props = _objectWithoutProperties(_ref, [\"children\", \"ref\", \"href\", \"family\", \"target\", \"variant\", \"size\", \"weight\", \"align\", \"isEqualSize\", \"isEqualAlign\", \"margin\", \"width\"]);\n\n  if (!href) return __jsx(StyledText, _extends({\n    variant: variant,\n    size: size,\n    weight: weight,\n    align: align,\n    isEqualSize: isEqualSize,\n    isEqualAlign: isEqualAlign,\n    margin: margin,\n    width: width,\n    family: family\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }), children);\n  return __jsx(StyledLink, {\n    href: href,\n    variant: variant,\n    target: target,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, children);\n});\nText.propTypes = {\n  variant: string,\n  size: string,\n  weight: string,\n  align: string,\n  isEqualSize: string,\n  isEqualAlign: string\n};\nexport default Text;","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/components/atoms/texts/text.jsx"],"names":["forwardRef","StyledText","StyledLink","string","Text","children","ref","href","family","target","variant","size","weight","align","isEqualSize","isEqualAlign","margin","width","props","propTypes"],"mappings":";;;;;;;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AAEA,OAAOC,UAAP,IAAoBC,UAApB,QAAqC,mBAArC;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,IAAMC,IAAI,GAAGJ,UAAU,CAAC,gBAA6H;AAAA,MAA3HK,QAA2H,QAA3HA,QAA2H;AAAA,MAAjHC,GAAiH,QAAjHA,GAAiH;AAAA,MAA5GC,IAA4G,QAA5GA,IAA4G;AAAA,MAAtGC,MAAsG,QAAtGA,MAAsG;AAAA,MAA9FC,MAA8F,QAA9FA,MAA8F;AAAA,MAAtFC,OAAsF,QAAtFA,OAAsF;AAAA,MAA7EC,IAA6E,QAA7EA,IAA6E;AAAA,MAAvEC,MAAuE,QAAvEA,MAAuE;AAAA,MAA/DC,KAA+D,QAA/DA,KAA+D;AAAA,MAAxDC,WAAwD,QAAxDA,WAAwD;AAAA,MAA3CC,YAA2C,QAA3CA,YAA2C;AAAA,MAA7BC,MAA6B,QAA7BA,MAA6B;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAXC,KAAW;;AAEjJ,MAAG,CAACX,IAAJ,EACI,OACI,MAAC,UAAD;AACA,IAAA,OAAO,EAAEG,OADT;AAEA,IAAA,IAAI,EAAEC,IAFN;AAGA,IAAA,MAAM,EAAEC,MAHR;AAIA,IAAA,KAAK,EAAEC,KAJP;AAKA,IAAA,WAAW,EAAEC,WALb;AAMA,IAAA,YAAY,EAAEC,YANd;AAOA,IAAA,MAAM,EAAEC,MAPR;AAQA,IAAA,KAAK,EAAEC,KARP;AASA,IAAA,MAAM,EAAET;AATR,KAUIU,KAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYKb,QAZL,CADJ;AAiBJ,SACI,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEE,IAAlB;AAAwB,IAAA,OAAO,EAAEG,OAAjC;AAA0C,IAAA,MAAM,EAAED,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,QADL,CADJ;AAKH,CAzBsB,CAAvB;AA2BAD,IAAI,CAACe,SAAL,GAAiB;AACbT,EAAAA,OAAO,EAAEP,MADI;AAEbQ,EAAAA,IAAI,EAAER,MAFO;AAGbS,EAAAA,MAAM,EAAET,MAHK;AAIbU,EAAAA,KAAK,EAAEV,MAJM;AAKbW,EAAAA,WAAW,EAAEX,MALA;AAMbY,EAAAA,YAAY,EAAEZ;AAND,CAAjB;AASA,eAAeC,IAAf","sourcesContent":["import {forwardRef} from 'react';\n\nimport StyledText, {StyledLink} from './text.styles.jsx'\nimport { string } from 'prop-types'\n\nconst Text = forwardRef(({children, ref, href, family, target, variant, size, weight, align, isEqualSize, isEqualAlign, margin, width, ...props}) => {\n\n    if(!href)\n        return(\n            <StyledText \n            variant={variant} \n            size={size} \n            weight={weight} \n            align={align}\n            isEqualSize={isEqualSize}\n            isEqualAlign={isEqualAlign}\n            margin={margin}\n            width={width}\n            family={family}\n            {...props}\n            >\n                {children}\n            </StyledText>\n        )\n\n    return (\n        <StyledLink href={href} variant={variant} target={target}>\n            {children}\n        </StyledLink>\n    )\n})\n\nText.propTypes = {\n    variant: string,\n    size: string,\n    weight: string,\n    align: string,\n    isEqualSize: string,\n    isEqualAlign: string\n}\n\nexport default Text"]},"metadata":{},"sourceType":"module"}