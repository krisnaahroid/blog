{"ast":null,"code":"import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE, USER } from '../types';\nimport { API, cookie } from '../../utilities'; // register user\n\nvar register = function register(_ref, type) {\n  var firstname = _ref.firstname,\n      lastname = _ref.lastname,\n      mobile_no = _ref.mobile_no,\n      email_id = _ref.email_id,\n      password = _ref.password,\n      confirm_password = _ref.confirm_password;\n\n  if (type !== 'register') {\n    throw new Error('Wrong API call!');\n  }\n\n  return function (dispatch) {\n    axios.post(\"\".concat(API, \"/\").concat(type), {\n      firstname: firstname,\n      lastname: lastname,\n      mobile_no: mobile_no,\n      email_id: email_id,\n      password: password,\n      confirm_password: confirm_password\n    }).then(function (response) {\n      Router.push('/signin');\n      console.log(response.data.meta.message);\n    })[\"catch\"](function (err) {\n      switch (error.response.status) {\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 401:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n}; // gets token from the api and stores it in the redux store and in cookie\n\n\nvar authenticate = function authenticate(_ref2, type) {\n  var email_id = _ref2.email_id,\n      password = _ref2.password;\n\n  if (type !== 'login') {\n    throw new Error('Wrong API call!');\n  }\n\n  return function (dispatch) {\n    console.log(email_id);\n    axios.post(\"\".concat(API, \"/\").concat(type), {\n      email_id: email_id,\n      password: password\n    }).then(function (response) {\n      console.log(response.data.data.user.token);\n      cookie.setCookie('token', response.data.data.user.token);\n      Router.push('/users');\n      dispatch({\n        type: AUTHENTICATE,\n        payload: response.data.data.user.token\n      });\n    })[\"catch\"](function (err) {\n      console.log(err);\n\n      switch (error.response.status) {\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 401:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n}; // gets the token from the cookie and saves it in the store\n\n\nvar reauthenticate = function reauthenticate(token) {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\n\nvar deauthenticate = function deauthenticate() {\n  return function (dispatch) {\n    cookie.removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n};\n\nvar getUser = function getUser(_ref3, type) {\n  var token = _ref3.token;\n  console.log(token);\n  return function (dispatch) {\n    axios.get(\"\".concat(API, \"/\").concat(type), {\n      headers: {\n        \"Authorization\": \"bearer \" + token\n      }\n    }).then(function (response) {\n      dispatch({\n        type: USER,\n        payload: response.data.data.user\n      });\n    })[\"catch\"](function (error) {\n      switch (error.response.status) {\n        case 401:\n          Router.push('/');\n          break;\n\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n\n        case 503:\n          alert(error.response.data.meta.message);\n          Router.push('/');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n};\n\nexport default {\n  register: register,\n  authenticate: authenticate,\n  reauthenticate: reauthenticate,\n  deauthenticate: deauthenticate,\n  getUser: getUser\n};","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/store/modules/login/actions.js"],"names":["Router","axios","AUTHENTICATE","DEAUTHENTICATE","USER","API","cookie","register","type","firstname","lastname","mobile_no","email_id","password","confirm_password","Error","dispatch","post","then","response","push","console","log","data","meta","message","err","error","status","alert","authenticate","user","token","setCookie","payload","reauthenticate","deauthenticate","removeCookie","getUser","get","headers"],"mappings":"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","sourcesContent":["import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE, USER } from '../types';\nimport { API, cookie } from '../../utilities';\n\n// register user\nconst register = ({ firstname, lastname, mobile_no, email_id, password, confirm_password }, type) => {\n  if (type !== 'register') {\n    throw new Error('Wrong API call!');\n  }\n  return (dispatch) => {\n    axios.post(`${API}/${type}`, {firstname, lastname, mobile_no, email_id, password, confirm_password })\n      .then((response) => {\n        Router.push('/signin');\n        console.log(response.data.meta.message);\n      })\n      .catch((err) => {\n        switch (error.response.status) {\n          case 422:\n          alert(error.response.data.meta.message);\n            break;\n          case 401:\n          alert(error.response.data.meta.message);\n            break;\n          case 500:\n          alert('Interval server error! Try again!');\n            break;\n          default:\n          alert(error.response.data.meta.message);\n            break;\n        }\n      });\n  };\n};\n// gets token from the api and stores it in the redux store and in cookie\nconst authenticate = ({ email_id, password }, type) => {\n  if (type !== 'login') {\n    throw new Error('Wrong API call!');\n  }\n  return (dispatch) => {\n    console.log(email_id)\n    axios.post(`${API}/${type}`, { email_id, password })\n      .then((response) => {\n        console.log(response.data.data.user.token);\n        cookie.setCookie('token', response.data.data.user.token);\n        Router.push('/users');\n        dispatch({type: AUTHENTICATE, payload: response.data.data.user.token});\n      })\n      .catch((err) => {\n        console.log(err);\n        switch (error.response.status) {\n          case 422:\n          alert(error.response.data.meta.message);\n            break;\n          case 401:\n          alert(error.response.data.meta.message);\n            break;\n          case 500:\n          alert('Interval server error! Try again!');\n            break;\n          default:\n          alert(error.response.data.meta.message);\n            break;\n        }\n\n      });\n  };\n};\n\n// gets the token from the cookie and saves it in the store\nconst reauthenticate = (token) => {\n  return (dispatch) => {\n    dispatch({type: AUTHENTICATE, payload: token});\n  };\n};\n\n// removing the token\nconst deauthenticate = () => {\n  return (dispatch) => {\n    cookie.removeCookie('token');\n    Router.push('/');\n    dispatch({type: DEAUTHENTICATE});\n  };\n};\n\nconst getUser = ({ token }, type) => {\n  console.log(token)\n  return (dispatch) => {\n    axios.get(`${API}/${type}`,{headers: {\n      \"Authorization\" : \"bearer \" + token\n    }\n  })\n      .then((response) => {\n        dispatch({ type: USER, payload: response.data.data.user });\n      })\n      .catch((error) => {\n        switch (error.response.status) {\n          case 401:\n            Router.push('/');\n            break;\n          case 422:\n            alert(error.response.data.meta.message);\n            break;\n          case 500:\n          alert('Interval server error! Try again!');\n          case 503:\n          alert(error.response.data.meta.message);\n          Router.push('/');\n            break;\n          default:\n          alert(error.response.data.meta.message);\n            break;\n        }\n      });\n  };\n};\n\n\nexport default {\n  register,\n  authenticate,\n  reauthenticate,\n  deauthenticate,\n  getUser,\n};"]},"metadata":{},"sourceType":"module"}