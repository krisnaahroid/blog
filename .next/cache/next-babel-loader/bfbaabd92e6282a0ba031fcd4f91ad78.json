{"ast":null,"code":"var _jsxFileName = \"/Users/ahroidlife/Documents/nextjs/blog/components/atoms/views/view.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport StyledView from './view.styles.jsx';\nimport { any, string } from 'prop-types';\n\nconst View = (_ref) => {\n  let {\n    children,\n    style,\n    isEqualFlex,\n    flexValue,\n    direction,\n    justify,\n    overflow,\n    isBoxShadow,\n    width,\n    isEqualWidth,\n    isEqualHeight,\n    height,\n    radius,\n    backgroundColor,\n    isEqualBackground,\n    isEqualDirection,\n    position,\n    bottom,\n    margin\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"style\", \"isEqualFlex\", \"flexValue\", \"direction\", \"justify\", \"overflow\", \"isBoxShadow\", \"width\", \"isEqualWidth\", \"isEqualHeight\", \"height\", \"radius\", \"backgroundColor\", \"isEqualBackground\", \"isEqualDirection\", \"position\", \"bottom\", \"margin\"]);\n\n  return __jsx(StyledView, _extends({\n    style: style,\n    isBoxShadow: isBoxShadow,\n    isEqualFlex: isEqualFlex,\n    width: width,\n    height: height,\n    isEqualWidth: isEqualWidth,\n    isEqualHeight: isEqualHeight,\n    radius: radius,\n    backgroundColor: backgroundColor,\n    isEqualBackground: isEqualBackground,\n    flexValue: flexValue,\n    justify: justify,\n    overflow: overflow,\n    position: position,\n    bottom: bottom,\n    direction: direction,\n    isEqualDirection: isEqualDirection,\n    margin: margin\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), children);\n};\n\nView.propTypes = {\n  style: any,\n  width: string,\n  height: string,\n  isEqualWidth: string,\n  isEqualHeight: string,\n  isEqualFlex: string,\n  direction: string,\n  isEqualDirection: string,\n  justify: string,\n  flexValue: string,\n  position: string,\n  margin: string,\n  overflow: string,\n  backgroundColor: string,\n  isEqualBackground: string,\n  isBoxShadow: string,\n  radius: string\n};\nexport default View;","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/components/atoms/views/view.jsx"],"names":["React","StyledView","any","string","View","children","style","isEqualFlex","flexValue","direction","justify","overflow","isBoxShadow","width","isEqualWidth","isEqualHeight","height","radius","backgroundColor","isEqualBackground","isEqualDirection","position","bottom","margin","props","propTypes"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,YAA5B;;AAEA,MAAMC,IAAI,GAAG,UAoBK;AAAA,MApBJ;AACVC,IAAAA,QADU;AAEVC,IAAAA,KAFU;AAGVC,IAAAA,WAHU;AAIVC,IAAAA,SAJU;AAKVC,IAAAA,SALU;AAMVC,IAAAA,OANU;AAOVC,IAAAA,QAPU;AAQVC,IAAAA,WARU;AASVC,IAAAA,KATU;AAUVC,IAAAA,YAVU;AAWVC,IAAAA,aAXU;AAYVC,IAAAA,MAZU;AAaVC,IAAAA,MAbU;AAcVC,IAAAA,eAdU;AAeVC,IAAAA,iBAfU;AAgBVC,IAAAA,gBAhBU;AAiBVC,IAAAA,QAjBU;AAkBVC,IAAAA,MAlBU;AAmBVC,IAAAA;AAnBU,GAoBI;AAAA,MAAXC,KAAW;;AAEd,SACI,MAAC,UAAD;AACA,IAAA,KAAK,EAAElB,KADP;AAEA,IAAA,WAAW,EAAEM,WAFb;AAGA,IAAA,WAAW,EAAEL,WAHb;AAIA,IAAA,KAAK,EAAEM,KAJP;AAKA,IAAA,MAAM,EAAEG,MALR;AAMA,IAAA,YAAY,EAAEF,YANd;AAOA,IAAA,aAAa,EAAEC,aAPf;AAQA,IAAA,MAAM,EAAEE,MARR;AASA,IAAA,eAAe,EAAEC,eATjB;AAUA,IAAA,iBAAiB,EAAEC,iBAVnB;AAWA,IAAA,SAAS,EAAEX,SAXX;AAYA,IAAA,OAAO,EAAEE,OAZT;AAaA,IAAA,QAAQ,EAAEC,QAbV;AAcA,IAAA,QAAQ,EAAEU,QAdV;AAeA,IAAA,MAAM,EAAEC,MAfR;AAgBA,IAAA,SAAS,EAAEb,SAhBX;AAiBA,IAAA,gBAAgB,EAAEW,gBAjBlB;AAkBA,IAAA,MAAM,EAAEG;AAlBR,KAmBIC,KAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBKnB,QApBL,CADJ;AAwBH,CA9CD;;AAgDAD,IAAI,CAACqB,SAAL,GAAiB;AACbnB,EAAAA,KAAK,EAAEJ,GADM;AAEbW,EAAAA,KAAK,EAAEV,MAFM;AAGba,EAAAA,MAAM,EAAEb,MAHK;AAIbW,EAAAA,YAAY,EAAEX,MAJD;AAKbY,EAAAA,aAAa,EAAEZ,MALF;AAMbI,EAAAA,WAAW,EAAEJ,MANA;AAObM,EAAAA,SAAS,EAAEN,MAPE;AAQbiB,EAAAA,gBAAgB,EAAEjB,MARL;AASbO,EAAAA,OAAO,EAAEP,MATI;AAUbK,EAAAA,SAAS,EAAEL,MAVE;AAWbkB,EAAAA,QAAQ,EAAElB,MAXG;AAYboB,EAAAA,MAAM,EAAEpB,MAZK;AAabQ,EAAAA,QAAQ,EAAER,MAbG;AAcbe,EAAAA,eAAe,EAAEf,MAdJ;AAebgB,EAAAA,iBAAiB,EAAEhB,MAfN;AAgBbS,EAAAA,WAAW,EAAET,MAhBA;AAiBbc,EAAAA,MAAM,EAAEd;AAjBK,CAAjB;AAoBA,eAAeC,IAAf","sourcesContent":["import React from 'react'\n\nimport StyledView from './view.styles.jsx'\nimport { any, string } from 'prop-types'\n\nconst View = ({ \n    children, \n    style, \n    isEqualFlex,\n    flexValue, \n    direction,\n    justify,\n    overflow, \n    isBoxShadow, \n    width, \n    isEqualWidth, \n    isEqualHeight, \n    height, \n    radius, \n    backgroundColor, \n    isEqualBackground,\n    isEqualDirection, \n    position,\n    bottom,\n    margin,\n    ...props}) => {\n\n    return (\n        <StyledView \n        style={style} \n        isBoxShadow={isBoxShadow} \n        isEqualFlex={isEqualFlex}\n        width={width}\n        height={height}\n        isEqualWidth={isEqualWidth}\n        isEqualHeight={isEqualHeight}\n        radius={radius}\n        backgroundColor={backgroundColor}\n        isEqualBackground={isEqualBackground}\n        flexValue={flexValue}\n        justify={justify}\n        overflow={overflow}\n        position={position}\n        bottom={bottom}\n        direction={direction}\n        isEqualDirection={isEqualDirection}\n        margin={margin}\n        {...props}>\n            {children}\n        </StyledView>\n    )\n}\n\nView.propTypes = {\n    style: any,\n    width: string,\n    height: string,\n    isEqualWidth: string,\n    isEqualHeight: string,\n    isEqualFlex: string,\n    direction: string,\n    isEqualDirection: string,\n    justify: string,\n    flexValue: string,\n    position: string,\n    margin: string,\n    overflow: string,\n    backgroundColor: string,\n    isEqualBackground: string,\n    isBoxShadow: string,\n    radius: string\n}\n\nexport default View"]},"metadata":{},"sourceType":"module"}