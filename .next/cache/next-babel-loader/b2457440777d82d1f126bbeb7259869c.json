{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { rootEpic, rootReducer } from './modules/root';\nimport logger from 'redux-logger';\nvar epicMiddleware = createEpicMiddleware();\n\nvar configureStore = function configureStore() {\n  var composeEnhancers, store;\n  return _regeneratorRuntime.async(function configureStore$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          composeEnhancers = true && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n          }) : compose;\n          store = createStore(rootReducer, composeEnhancers(applyMiddleware(epicMiddleware, logger)));\n          epicMiddleware.run(rootEpic);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(epicMiddleware.terminate().toPromise());\n\n        case 5:\n          return _context.abrupt(\"return\", store);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/store/confirgureStore.js"],"names":["createStore","applyMiddleware","compose","createEpicMiddleware","rootEpic","rootReducer","logger","epicMiddleware","configureStore","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","run","terminate","toPromise"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,OAAtC,QAAoD,OAApD;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,gBAApC;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,IAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,UAAAA,gBAFa,GAGnB,QACAC,MAAM,CAACC,oCADP,GAEID,MAAM,CAACC,oCAAP,CAA4C,CAC5C;AAD4C,WAA5C,CAFJ,GAIST,OAPU;AASbU,UAAAA,KATa,GASLZ,WAAW,CACrBK,WADqB,EAErBI,gBAAgB,CACZR,eAAe,CAACM,cAAD,EAAiBD,MAAjB,CADH,CAFK,CATN;AAgBnBC,UAAAA,cAAc,CAACM,GAAf,CAAmBT,QAAnB;AAhBmB;AAAA,2CAiBbG,cAAc,CAACO,SAAf,GAA2BC,SAA3B,EAjBa;;AAAA;AAAA,2CAmBZH,KAnBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import {createStore, applyMiddleware, compose} from 'redux'\nimport { createEpicMiddleware } from 'redux-observable'\nimport {rootEpic, rootReducer} from './modules/root'\n\nimport logger from 'redux-logger'\n\nconst epicMiddleware = createEpicMiddleware()\n\nconst configureStore = async () => {\n\n    const composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n        }) : compose;\n\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(\n            applyMiddleware(epicMiddleware, logger)\n        )\n    )\n\n    epicMiddleware.run(rootEpic)\n    await epicMiddleware.terminate().toPromise(); \n\n    return store\n}"]},"metadata":{},"sourceType":"module"}