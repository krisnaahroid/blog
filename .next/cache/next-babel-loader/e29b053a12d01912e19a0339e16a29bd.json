{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { BlogLayout } from \"../../components/templates/layouts\";\nimport { Container, View, Text, Image, Badge } from '../../components/atoms';\nimport Moment from 'moment';\nimport './stories.scss';\nimport Link from 'next/link';\nimport { useRouter } from 'next/dist/client/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as Markdown from 'react-markdown';\nimport { documentToHtmlString } from '@contentful/rich-text-html-renderer';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport actions from '../../store/modules/stories/actions';\nimport { NextSeo } from 'next-seo';\n\nconst Bold = ({\n  children\n}) => __jsx(\"p\", {\n  className: \"bold\"\n}, children);\n\nconst client = require('contentful').createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\nconst Story = ({\n  story\n}) => {\n  console.log(\"RES :: \", story);\n  const options = {\n    renderMark: {\n      [MARKS.BOLD]: text => __jsx(Text, null, text)\n    },\n    renderNode: {\n      [BLOCKS.PARAGRAPH]: (node, children) => __jsx(Text, {\n        variant: \"grey\"\n      }, children),\n      [BLOCKS.EMBEDDED_ASSET]: node => {\n        // console.log(node)\n        let {\n          description,\n          title,\n          file\n        } = node.data.target.fields;\n        return __jsx(\"img\", {\n          src: file.url\n        });\n      }\n    },\n    renderText: text => {\n      return text.split('\\n').reduce((children, textSegment, index) => {\n        return [...children, index > 0 && __jsx(\"br\", {\n          key: index\n        }), textSegment];\n      }, []);\n    }\n  };\n  const content = documentToReactComponents(story.items[0].fields.body, options);\n  return __jsx(React.Fragment, null, __jsx(NextSeo, {\n    openGraph: {\n      title: story.items[0].fields.title,\n      description: story.items[0].fields.subtitle,\n      url: `https://ahroidlife.com/stories/${story.items[0].fields.slug}`,\n      type: 'article',\n      article: {\n        authors: [story.items[0].fields.author.fields.name],\n        tags: [story.items[0].fields.tags]\n      },\n      images: [{\n        url: `https:${story.items[0].fields.heroImage.fields.file.url}`,\n        width: story.items[0].fields.heroImage.fields.file.details.image.width,\n        height: story.items[0].fields.heroImage.fields.file.details.image.height,\n        alt: story.items[0].fields.heroImage.fields.file.title\n      }]\n    }\n  }), __jsx(BlogLayout, null, __jsx(Container, {\n    className: \"story-container\"\n  }, __jsx(View, {\n    className: \"story-content\",\n    direction: \"column\"\n  }, __jsx(Link, {\n    href: \"/stories\"\n  }, __jsx(\"a\", null, __jsx(View, {\n    className: \"story-close-btn\"\n  }, __jsx(Image, {\n    src: \"/static/illustrations/close-dark.svg\"\n  })))), __jsx(View, {\n    className: \"story-content-header\"\n  }, __jsx(\"h1\", {\n    className: \"title\"\n  }, story.items[0].fields.title), __jsx(Text, {\n    className: \"subtitle\",\n    family: \"quicksand\"\n  }, story.items[0].fields.subtitle), __jsx(Image, {\n    src: `https:${story.items[0].fields.heroImage.fields.file.url}`,\n    className: \"hero-image\"\n  })), __jsx(View, {\n    className: \"story-content-body\",\n    direction: \"column\"\n  }, content), __jsx(View, {\n    className: \"story-content-footer\"\n  }, __jsx(View, {\n    className: \"tags-wrapper\"\n  }, __jsx(Text, {\n    className: \"title\"\n  }, \"Tags\"), __jsx(View, {\n    className: \"tags\"\n  }, story.items[0].fields.tags.map((tag, index) => __jsx(Badge, {\n    key: index,\n    title: tag,\n    backgroundColor: \"#FFEDED\",\n    color: \"#FF5252\"\n  })))), __jsx(View, {\n    className: \"publish-date\"\n  }, __jsx(Text, {\n    className: \"title\"\n  }, \"Publish date\"), __jsx(Text, {\n    className: \"subtitle\"\n  }, Moment(story.items[0].fields.publishDate).format('LLLL'))))))));\n};\n\nStory.getInitialProps = async ({\n  query\n}) => {\n  const res = await client.getEntries({\n    content_type: 'story',\n    'fields.slug[match]': query.slug\n  });\n  return {\n    story: res\n  };\n};\n\nexport default Story;","map":null,"metadata":{},"sourceType":"module"}