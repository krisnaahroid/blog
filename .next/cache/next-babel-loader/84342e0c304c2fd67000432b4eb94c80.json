{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport types from \"./types\";\n\nvar quackReducer = function quackReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.QUACK:\n      return true;\n\n    /* ... */\n\n    default:\n      return state;\n  }\n};\n\nvar distanceReducer = function distanceReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.SWIM:\n      return state + action.payload.distance;\n\n    /* ... */\n\n    default:\n      return state;\n  }\n};\n\nvar reducer = combineReducers({\n  quacking: quackReducer,\n  distance: distanceReducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/store/modules/login/reducers.js"],"names":["combineReducers","types","quackReducer","state","action","type","QUACK","distanceReducer","SWIM","payload","distance","reducer","quacking"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAA6B;AAAA,MAA3BC,KAA2B,uEAAnB,KAAmB;AAAA,MAAZC,MAAY;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACK,KAAX;AAAkB,aAAO,IAAP;;AAClB;;AACA;AAAS,aAAOH,KAAP;AAHb;AAKH,CAND;;AAQA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,GAAyB;AAAA,MAAvBJ,KAAuB,uEAAf,CAAe;AAAA,MAAZC,MAAY;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACO,IAAX;AAAiB,aAAOL,KAAK,GAAGC,MAAM,CAACK,OAAP,CAAeC,QAA9B;;AACjB;;AACA;AAAS,aAAOP,KAAP;AAHb;AAKH,CAND;;AAQA,IAAMQ,OAAO,GAAGX,eAAe,CAAE;AAC7BY,EAAAA,QAAQ,EAAEV,YADmB;AAE7BQ,EAAAA,QAAQ,EAAEH;AAFmB,CAAF,CAA/B;AAKA,eAAeI,OAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport types from \"./types\";\n\nconst quackReducer = ( state = false, action ) => {\n    switch( action.type ) {\n        case types.QUACK: return true;\n        /* ... */\n        default: return state;\n    }\n}\n\nconst distanceReducer = ( state = 0, action ) => {\n    switch( action.type ) {\n        case types.SWIM: return state + action.payload.distance;\n        /* ... */\n        default: return state;\n    }\n}\n\nconst reducer = combineReducers( {\n    quacking: quackReducer,\n    distance: distanceReducer\n} );\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}