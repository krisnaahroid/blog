{"ast":null,"code":"var _jsxFileName = \"/Users/ahroidlife/Documents/nextjs/blog/components/atoms/texts/text.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef } from 'react';\nimport StyledText, { StyledLink } from './text.styles.jsx';\nimport { string } from 'prop-types';\n\nconst Text = (_ref) => {\n  let {\n    children,\n    href,\n    family,\n    target,\n    variant,\n    size,\n    weight,\n    align,\n    isEqualSize,\n    isEqualAlign,\n    margin,\n    width\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"href\", \"family\", \"target\", \"variant\", \"size\", \"weight\", \"align\", \"isEqualSize\", \"isEqualAlign\", \"margin\", \"width\"]);\n\n  const myRef = useRef();\n  if (!href) return __jsx(StyledText, _extends({\n    variant: variant,\n    size: size,\n    weight: weight,\n    align: align,\n    isEqualSize: isEqualSize,\n    isEqualAlign: isEqualAlign,\n    margin: margin,\n    width: width,\n    family: family,\n    ref: myRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }), children);\n  return __jsx(StyledLink, {\n    href: href,\n    variant: variant,\n    target: target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nText.propTypes = {\n  variant: string,\n  size: string,\n  weight: string,\n  align: string,\n  isEqualSize: string,\n  isEqualAlign: string\n};\nexport default Text;","map":{"version":3,"sources":["/Users/ahroidlife/Documents/nextjs/blog/components/atoms/texts/text.jsx"],"names":["React","useRef","StyledText","StyledLink","string","Text","children","href","family","target","variant","size","weight","align","isEqualSize","isEqualAlign","margin","width","props","myRef","propTypes"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAEA,OAAOC,UAAP,IAAoBC,UAApB,QAAqC,mBAArC;AACA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,IAAI,GAAG,UAAwH;AAAA,MAAvH;AAACC,IAAAA,QAAD;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA,MAAzB;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA,IAA1C;AAAgDC,IAAAA,MAAhD;AAAwDC,IAAAA,KAAxD;AAA+DC,IAAAA,WAA/D;AAA4EC,IAAAA,YAA5E;AAA0FC,IAAAA,MAA1F;AAAkGC,IAAAA;AAAlG,GAAuH;AAAA,MAAXC,KAAW;;AACjI,QAAMC,KAAK,GAAGlB,MAAM,EAApB;AACA,MAAG,CAACM,IAAJ,EACI,OACI,MAAC,UAAD;AACA,IAAA,OAAO,EAAEG,OADT;AAEA,IAAA,IAAI,EAAEC,IAFN;AAGA,IAAA,MAAM,EAAEC,MAHR;AAIA,IAAA,KAAK,EAAEC,KAJP;AAKA,IAAA,WAAW,EAAEC,WALb;AAMA,IAAA,YAAY,EAAEC,YANd;AAOA,IAAA,MAAM,EAAEC,MAPR;AAQA,IAAA,KAAK,EAAEC,KARP;AASA,IAAA,MAAM,EAAET,MATR;AAUA,IAAA,GAAG,EAAEW;AAVL,KAWID,KAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaKZ,QAbL,CADJ;AAkBJ,SACI,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEC,IAAlB;AAAwB,IAAA,OAAO,EAAEG,OAAjC;AAA0C,IAAA,MAAM,EAAED,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,QADL,CADJ;AAKH,CA1BD;;AA4BAD,IAAI,CAACe,SAAL,GAAiB;AACbV,EAAAA,OAAO,EAAEN,MADI;AAEbO,EAAAA,IAAI,EAAEP,MAFO;AAGbQ,EAAAA,MAAM,EAAER,MAHK;AAIbS,EAAAA,KAAK,EAAET,MAJM;AAKbU,EAAAA,WAAW,EAAEV,MALA;AAMbW,EAAAA,YAAY,EAAEX;AAND,CAAjB;AASA,eAAeC,IAAf","sourcesContent":["import React, { useRef } from 'react'\n\nimport StyledText, {StyledLink} from './text.styles.jsx'\nimport { string } from 'prop-types'\n\nconst Text = ({children, href, family, target, variant, size, weight, align, isEqualSize, isEqualAlign, margin, width, ...props}) => {\n    const myRef = useRef()\n    if(!href)\n        return(\n            <StyledText \n            variant={variant} \n            size={size} \n            weight={weight} \n            align={align}\n            isEqualSize={isEqualSize}\n            isEqualAlign={isEqualAlign}\n            margin={margin}\n            width={width}\n            family={family}\n            ref={myRef}\n            {...props}\n            >\n                {children}\n            </StyledText>\n        )\n\n    return (\n        <StyledLink href={href} variant={variant} target={target}>\n            {children}\n        </StyledLink>\n    )\n}\n\nText.propTypes = {\n    variant: string,\n    size: string,\n    weight: string,\n    align: string,\n    isEqualSize: string,\n    isEqualAlign: string\n}\n\nexport default Text"]},"metadata":{},"sourceType":"module"}